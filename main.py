import json
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

BOT_TOKEN = "8179817126:AAH4Ctzrpwg3DknMg7_dSMxdoBRFI26aIfM"  # <<< PUT YOUR BOT TOKEN HERE

LANG_FILE = "languages.json"

# Load languages from file or create new
if os.path.exists(LANG_FILE):
    with open(LANG_FILE, "r") as f:
        user_languages = json.load(f)
else:
    user_languages = {}

def save_languages():
    with open(LANG_FILE, "w") as f:
        json.dump(user_languages, f)

def get_lang(user_id):
    return user_languages.get(str(user_id), "eng")

# All bot texts
TEXTS = {
    "start": {
        "eng": "üë∑‚Äç‚ôÇÔ∏è Hello! I am your PM Assistant Bot.\nUse /help to see what I can do.",
        "kaz": "üë∑‚Äç‚ôÇÔ∏è –°”ô–ª–µ–º! –ú–µ–Ω —Å—ñ–∑–¥—ñ“£ “õ“±—Ä—ã–ª—ã—Å –∫”©–º–µ–∫—à—ñ“£—ñ–∑–º—ñ–Ω.\n–ù–µ —ñ—Å—Ç–µ–π –∞–ª–∞—Ç—ã–Ω—ã–º–¥—ã –∫”©—Ä—É “Ø—à—ñ–Ω /help “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.",
        "rus": "üë∑‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
    },
    "help": {
        "eng": "Available commands:\n/area <length> <width> - Calculate area\n/volume <length> <width> <depth> - Calculate volume\n/foundationpit <length> <width> <depth> - Foundation pit\n/lang <eng|kaz|rus> - Change language",
        "kaz": "“ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä:\n/area <“±–∑—ã–Ω–¥—ã“ì—ã> <–µ–Ω—ñ> - –ê—É–¥–∞–Ω–¥—ã –µ—Å–µ–ø—Ç–µ—É\n/volume <“±–∑—ã–Ω–¥—ã“ì—ã> <–µ–Ω—ñ> <—Ç–µ—Ä–µ“£–¥—ñ–≥—ñ> - –ö”©–ª–µ–º—ñ–Ω –µ—Å–µ–ø—Ç–µ—É\n/foundationpit <“±–∑—ã–Ω–¥—ã“ì—ã> <–µ–Ω—ñ> <—Ç–µ—Ä–µ“£–¥—ñ–≥—ñ> - “ö–∞–∑–∞–Ω—à“±“£“õ—ã—Ä –∫”©–ª–µ–º—ñ\n/lang <eng|kaz|rus> - –¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É",
        "rus": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/area <–¥–ª–∏–Ω–∞> <—à–∏—Ä–∏–Ω–∞> - –í—ã—á–∏—Å–ª–∏—Ç—å –ø–ª–æ—â–∞–¥—å\n/volume <–¥–ª–∏–Ω–∞> <—à–∏—Ä–∏–Ω–∞> <–≥–ª—É–±–∏–Ω–∞> - –í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—ä–µ–º\n/foundationpit <–¥–ª–∏–Ω–∞> <—à–∏—Ä–∏–Ω–∞> <–≥–ª—É–±–∏–Ω–∞> - –ö–æ—Ç–ª–æ–≤–∞–Ω\n/lang <eng|kaz|rus> - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
    },
    "lang_set": {
        "eng": "‚úÖ Language set to English.",
        "kaz": "‚úÖ –¢—ñ–ª “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–µ –∞—É—ã—Å—Ç—ã—Ä—ã–ª–¥—ã.",
        "rus": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π."
    },
    "lang_invalid": {
        "eng": "‚ùå Unknown language. Use: eng, kaz, rus.",
        "kaz": "‚ùå –ë–µ–ª–≥—ñ—Å—ñ–∑ —Ç—ñ–ª. “ö–æ–ª–¥–∞–Ω—ã“£—ã–∑: eng, kaz, rus.",
        "rus": "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: eng, kaz, rus."
    },
    "area_result": {
        "eng": "‚úÖ Area: {:.2f} m¬≤",
        "kaz": "‚úÖ –ê—É–¥–∞–Ω—ã: {:.2f} –º¬≤",
        "rus": "‚úÖ –ü–ª–æ—â–∞–¥—å: {:.2f} –º¬≤"
    },
    "area_usage": {
        "eng": "Usage: /area <length> <width>",
        "kaz": "“ö–æ–ª–¥–∞–Ω—ã–ª—É—ã: /area <“±–∑—ã–Ω–¥—ã“ì—ã> <–µ–Ω—ñ>",
        "rus": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /area <–¥–ª–∏–Ω–∞> <—à–∏—Ä–∏–Ω–∞>"
    },
    "volume_result": {
        "eng": "‚úÖ Volume: {:.2f} m¬≥",
        "kaz": "‚úÖ –ö”©–ª–µ–º—ñ: {:.2f} –º¬≥",
        "rus": "‚úÖ –û–±—ä–µ–º: {:.2f} –º¬≥"
    },
    "volume_usage": {
        "eng": "Usage: /volume <length> <width> <depth>",
        "kaz": "“ö–æ–ª–¥–∞–Ω—ã–ª—É—ã: /volume <“±–∑—ã–Ω–¥—ã“ì—ã> <–µ–Ω—ñ> <—Ç–µ—Ä–µ“£–¥—ñ–≥—ñ>",
        "rus": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /volume <–¥–ª–∏–Ω–∞> <—à–∏—Ä–∏–Ω–∞> <–≥–ª—É–±–∏–Ω–∞>"
    },
    "pit_result": {
        "eng": "‚úÖ Foundation Pit Volume: {:.2f} m¬≥",
        "kaz": "‚úÖ “ö–∞–∑–∞–Ω—à“±“£“õ—ã—Ä –∫”©–ª–µ–º—ñ: {:.2f} –º¬≥",
        "rus": "‚úÖ –û–±—ä–µ–º –∫–æ—Ç–ª–æ–≤–∞–Ω–∞: {:.2f} –º¬≥"
    },
    "pit_usage": {
        "eng": "Usage: /foundationpit <length> <width> <depth>",
        "kaz": "“ö–æ–ª–¥–∞–Ω—ã–ª—É—ã: /foundationpit <“±–∑—ã–Ω–¥—ã“ì—ã> <–µ–Ω—ñ> <—Ç–µ—Ä–µ“£–¥—ñ–≥—ñ>",
        "rus": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /foundationpit <–¥–ª–∏–Ω–∞> <—à–∏—Ä–∏–Ω–∞> <–≥–ª—É–±–∏–Ω–∞>"
    },
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_lang(update.effective_user.id)
    await update.message.reply_text(TEXTS["start"][lang])

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_lang(update.effective_user.id)
    await update.message.reply_text(TEXTS["help"][lang])

async def set_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    current_lang = get_lang(user_id)

    if not context.args:
        await update.message.reply_text(TEXTS["lang_invalid"][current_lang])
        return

    new_lang = context.args[0].lower()
    if new_lang in ["eng", "kaz", "rus"]:
        user_languages[user_id] = new_lang
        save_languages()
        await update.message.reply_text(TEXTS["lang_set"][new_lang])
    else:
        await update.message.reply_text(TEXTS["lang_invalid"][current_lang])

async def area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_lang(update.effective_user.id)
    try:
        length = float(context.args[0])
        width = float(context.args[1])
        result = length * width
        await update.message.reply_text(TEXTS["area_result"][lang].format(result))
    except:
        await update.message.reply_text(TEXTS["area_usage"][lang])

async def volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_lang(update.effective_user.id)
    try:
        l = float(context.args[0])
        w = float(context.args[1])
        d = float(context.args[2])
        v = l * w * d
        await update.message.reply_text(TEXTS["volume_result"][lang].format(v))
    except:
        await update.message.reply_text(TEXTS["volume_usage"][lang])

async def foundation_pit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_lang(update.effective_user.id)
    try:
        l = float(context.args[0])
        w = float(context.args[1])
        d = float(context.args[2])
        pit = l * w * d
        await update.message.reply_text(TEXTS["pit_result"][lang].format(pit))
    except:
        await update.message.reply_text(TEXTS["pit_usage"][lang])

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("lang", set_lang))
    app.add_handler(CommandHandler("area", area))
    app.add_handler(CommandHandler("volume", volume))
    app.add_handler(CommandHandler("foundationpit", foundation_pit))

    print("Bot is running... Press Ctrl+C to stop.")
    app.run_polling()

if __name__ == "__main__":
    main()